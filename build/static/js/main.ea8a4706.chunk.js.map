{"version":3,"sources":["Components/TodoForm.js","Components/Todo.js","Components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TaskForm","props","_useState","useState","_useState2","_slicedToArray","input","setInput","React","createElement","className","type","placeholder","onChange","e","target","value","name","onClick","preventDefault","addTask","id","Math","floor","random","text","isComplete","Todo","_ref","todos","completeTask","removeTask","map","todo","index","key","TiTick","RiCloseCircleLine","TodoList","setTodos","TodoForm","task","newTodos","concat","_toConsumableArray","updatedTasks","_objectSpread","filter","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"iNAEe,SAASA,EAASC,GAAO,IAAAC,EACZC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA/BI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GAgBtB,OACEI,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,WACJD,IAAAC,cAAA,QAAMC,UAAU,aACdF,IAAAC,cAAA,SAAOE,KAAK,OAAOC,YAAY,aAAaC,SAlB7B,SAACC,GACpBP,EAASO,EAAEC,OAAOC,QAiBsDN,UAAU,aAAaM,MAAOV,EAAOW,KAAK,SAC9GT,IAAAC,cAAA,UAAQE,KAAK,SAASO,QAfP,SAACJ,GACpBA,EAAEK,iBACFlB,EAAMmB,QAAQ,CACZC,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMnB,EACNoB,YAAY,IAEdnB,EAAS,KAQwCG,UAAU,YAAW,gCCpB3D,SAASiB,EAAIC,GAAsC,IAAnCC,EAAKD,EAALC,MAAOC,EAAYF,EAAZE,aAAcC,EAAUH,EAAVG,WAChD,OAAOF,EAAMG,IAAI,SAACC,EAAMC,GAAK,OACzB1B,IAAAC,cAAA,OAAKC,UAAWuB,EAAKP,WAAa,oBAAsB,WAAYS,IAAKD,GACrE1B,IAAAC,cAAA,OAAKC,UAAU,aAAauB,EAAKR,MACjCjB,IAAAC,cAAA,OAAKC,UAAU,QAAQyB,IAAKF,EAAKZ,IAC7Bb,IAAAC,cAAC2B,IAAM,CAAC1B,UAAWuB,EAAKP,WAAa,OAAO,OAAQR,QAAS,kBAAMY,EAAaG,EAAKZ,OACrFb,IAAAC,cAAC4B,IAAiB,CAAC3B,UAAU,QAAQQ,QAAS,kBAAMa,EAAWE,EAAKZ,WCNrE,SAASiB,IAAW,IAAApC,EACLC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA/B2B,EAAKzB,EAAA,GAAEmC,EAAQnC,EAAA,GA4BtB,OACII,IAAAC,cAAA,WACID,IAAAC,cAAC+B,EAAQ,CAACpB,QA3BF,SAACqB,GACb,GAAKA,EAAKhB,KAAV,CAGA,IAAMiB,EAAQ,CAAID,GAAIE,OAAAC,YAAKf,IAC3BU,EAASG,OAuBLlC,IAAAC,cAACkB,EAAI,CAACE,MAAOA,EAAOC,aAbP,SAACT,GAClB,IAAIwB,EAAehB,EAAMG,IAAI,SAACC,GAC1B,OAAIA,EAAKZ,KAAOA,EACZyB,YAAA,GAAYb,EAAI,CAAEP,YAAY,IAE3BO,IAEXM,EAASM,IAM2Cd,WAnBrC,SAACV,GAChB,IAAIwB,EAAehB,EAAMkB,OAAO,SAACN,GAAI,OAAKA,EAAKpB,KAAOA,IACtDkB,EAASM,OCPFG,MARf,WACE,OACExC,IAAAC,cAAA,OAAKC,UAAU,uBACbF,IAAAC,cAAC6B,EAAQ,QCKAW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAtC,EAAA,GAAAuC,KAAAD,EAAAE,KAAA,UAAqBD,KAAK,SAAAzB,GAAiD,IAA9C2B,EAAM3B,EAAN2B,OAAQC,EAAM5B,EAAN4B,OAAQC,EAAM7B,EAAN6B,OAAQC,EAAM9B,EAAN8B,OAAQC,EAAO/B,EAAP+B,QAC3DJ,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCDDU,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHxD,IAAAC,cAACD,IAAMyD,WAAU,KACfzD,IAAAC,cAACuC,EAAG,QAORC","file":"static/js/main.ea8a4706.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nexport default function TaskForm(props) {\r\n  const [input, setInput] = useState('');\r\n\r\n  const handleChange = (e) => {\r\n    setInput(e.target.value);\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    props.addTask({\r\n      id: Math.floor(Math.random() * 1000000),\r\n      text: input,\r\n      isComplete: false\r\n    });\r\n    setInput('');\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>My Todo</h2>\r\n      <form className='todo-form'>\r\n        <input type=\"text\" placeholder='Add a todo' onChange={handleChange} className='todo-input' value={input} name='text' />\r\n        <button type=\"submit\" onClick={handleSubmit} className='todo-btn'>ADD TODO</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { RiCloseCircleLine } from 'react-icons/ri';\r\nimport { TiTick } from 'react-icons/ti';\r\n\r\nexport default function Todo({ todos, completeTask, removeTask }) {\r\n    return todos.map((todo, index) => (\r\n        <div className={todo.isComplete ? 'complete task-div' : 'task-div'} key={index}>\r\n            <div className='todo-text'>{todo.text}</div>\r\n            <div className='icons' key={todo.id}>\r\n                <TiTick className={todo.isComplete ? 'hide':'tick'} onClick={() => completeTask(todo.id)} />\r\n                <RiCloseCircleLine className='cross' onClick={() => removeTask(todo.id)} />\r\n            </div>\r\n        </div>\r\n    ));\r\n}\r\n","import React, { useState } from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\n\r\nexport default function TodoList() {\r\n    const [todos, setTodos] = useState([]);\r\n\r\n    // Add todo\r\n    const addTask = (task) => {\r\n        if (!task.text) {\r\n            return;\r\n        }\r\n        const newTodos = [task, ...todos];\r\n        setTodos(newTodos);\r\n    };\r\n\r\n    // Remove todo\r\n    const removeTask = (id) => {\r\n        let updatedTasks = todos.filter((task) => task.id !== id);\r\n        setTodos(updatedTasks);\r\n    };\r\n\r\n    // Complete todo\r\n    const completeTask = (id) => {\r\n        let updatedTasks = todos.map((todo) => {\r\n            if (todo.id === id) {\r\n                return { ...todo, isComplete: true };\r\n            }\r\n            return todo;\r\n        });\r\n        setTodos(updatedTasks);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <TodoForm addTask={addTask} />\r\n            <Todo todos={todos} completeTask={completeTask} removeTask={removeTask} />\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport TodoList from './Components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"Todo-list-container\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}